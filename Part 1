
//Converted Java Code from the MATLAB code:
//Headers for image importing, IO expection, color image, storing the image under arrays; 

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import java.awt.Color;
import java.util.ArrayList;
import java.util.List;

public class TemplateMatching {
    public static void main(String[] args) {
        try {
            BufferedImage templateImage = ImageIO.read(new File("TemplateImage.jpg"));
            BufferedImage sourceImage = ImageIO.read(new File("SourceImage.jpg"));

            BufferedImage result = templateMatching(templateImage, sourceImage);

            // Save the result image
            ImageIO.write(result, "jpg", new File("Result.jpg"));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static BufferedImage templateMatching(BufferedImage templateImage, BufferedImage sourceImage) {
        int r1 = sourceImage.getHeight();
        int c1 = sourceImage.getWidth();
        int r2 = templateImage.getHeight();
        int c2 = templateImage.getWidth();
        int tempSize = r2 * c2;   //height*width

        double minimum = Double.MAX_VALUE;
        double[][] absDiffMat = new double[r1 - r2 + 1][c1 - c2 + 1];

        for (int i = 0; i <= r1 - r2; i++) {
            for (int j = 0; j <= c1 - c2; j++) {
                double absDiff = 0.0;
                for (int x = 0; x < r2; x++) {
                    for (int y = 0; y < c2; y++) {
                        Color templatePixel = new Color(templateImage.getRGB(y, x));
                        Color sourcePixel = new Color(sourceImage.getRGB(j + y, i + x));
                        absDiff += Math.abs(getGrayScale(templatePixel) - getGrayScale(sourcePixel));
                    }
                }
                absDiff /= tempSize;
                absDiffMat[i][j] = absDiff;
                if (absDiff < minimum) {
                    minimum = absDiff;
                }
            }
        }

        double ratio = 10; // for calibration
        double threshold = ratio * minimum;

        List<int[]> coordinates = new ArrayList<>();     //Array List to store the row values, thus in order to access the result image
        for (int i = 0; i < absDiffMat.length; i++) {
            for (int j = 0; j < absDiffMat[0].length; j++) {
                if (absDiffMat[i][j] <= threshold) {
                    coordinates.add(new int[]{j, i});
                }
            }
        }

        // Draw circles at matching points in the result image
        BufferedImage result = new BufferedImage(sourceImage.getColorModel(),
                sourceImage.copyData(null), sourceImage.isAlphaPremultiplied(), null);

        for (int[] point : coordinates) {
            drawCircle(result, point[0] + c2 / 2, point[1] + r2 / 2, 5, Color.RED);
        }

        return result;
    }

    private static int getGrayScale(Color color) {
        return (color.getRed() + color.getGreen() + color.getBlue()) / 3;
    }

    private static void drawCircle(BufferedImage image, int xCenter, int yCenter, int radius, Color color) {
        int x0 = xCenter - radius;
        int x1 = xCenter + radius;
        int y0 = yCenter - radius;
        int y1 = yCenter + radius;

        for (int y = y0; y <= y1; y++) {
            for (int x = x0; x <= x1; x++) {
                if ((x - xCenter) * (x - xCenter) + (y - yCenter) * (y - yCenter) <= radius * radius) {
                    if (x >= 0 && x < image.getWidth() && y >= 0 && y < image.getHeight()) {
                        image.setRGB(x, y, color.getRGB());
                    }
                }
            }
        }
    }
}
